# Production Docker Compose for Terragon IoT Edge Anomaly Detection v4.0
version: '3.8'

services:
  # Main anomaly detection service
  anomaly-detector:
    build:
      context: ..
      dockerfile: docker/Dockerfile
      target: production
    image: terragon/iot-anomaly-detection:v4.0.0
    container_name: terragon-anomaly-detector
    restart: unless-stopped
    environment:
      - LOG_LEVEL=INFO
      - WORKERS=1
      - PORT=8080
    ports:
      - "8080:8080"  # Metrics port
      - "8081:8081"  # Health port
    volumes:
      - ./config/production.yaml:/app/config/production.yaml:ro
      - anomaly_logs:/app/logs
      - anomaly_models:/app/models
    command: ["--config", "config/production.yaml"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - terragon-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.2'
    security_opt:
      - no-new-privileges:true
    user: "1000:1000"
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m

  # Prometheus monitoring (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: terragon-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=168h'  # 7 days
      - '--web.enable-lifecycle'
    networks:
      - terragon-network
    depends_on:
      - anomaly-detector

  # Grafana dashboard (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: terragon-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=terragon_admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - terragon-network
    depends_on:
      - prometheus

  # Log aggregation (optional)
  loki:
    image: grafana/loki:latest
    container_name: terragon-loki
    restart: unless-stopped
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki-config.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - terragon-network

# Persistent volumes
volumes:
  anomaly_logs:
    driver: local
  anomaly_models:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local

# Network configuration
networks:
  terragon-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16