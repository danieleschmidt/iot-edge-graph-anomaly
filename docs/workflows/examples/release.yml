# This file should be copied to .github/workflows/release.yml
# See docs/workflows/README.md for full setup instructions

name: Release

on:
  push:
    tags:
      - 'v*'

env:
  PYTHON_VERSION: '3.10'

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    timeout-minutes: 15
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Generate release notes
        id: generate_notes
        run: |
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          if [ -n "$LAST_TAG" ]; then
            CHANGELOG=$(git log $LAST_TAG..HEAD --pretty=format:"- %s (%h)" --grep="^feat\|^fix\|^perf" --perl-regexp)
          else
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" --grep="^feat\|^fix\|^perf" --perl-regexp)
          fi
          
          echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: |
            ## What's Changed
            
            ${{ steps.generate_notes.outputs.CHANGELOG }}
            
            ## Docker Images
            
            - **Multi-architecture**: `docker pull ${{ secrets.DOCKER_USERNAME }}/iot-edge-graph-anomaly:${{ github.ref_name }}`
            
            ## Installation
            
            ```bash
            pip install iot-edge-graph-anomaly==${{ github.ref_name }}
            ```
          draft: false
          prerelease: ${{ contains(github.ref_name, 'rc') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'alpha') }}

  build-python-packages:
    name: Build Python Packages
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install build dependencies
        run: |
          pip install build twine
          
      - name: Build packages
        run: |
          python -m build
          
      - name: Check packages
        run: |
          twine check dist/*
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: python-packages
          path: dist/

  build-docker-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: Build and push Docker images
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/iot-edge-graph-anomaly:${{ github.ref_name }}
            ${{ secrets.DOCKER_USERNAME }}/iot-edge-graph-anomaly:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [create-release, build-python-packages]
    environment: production
    
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: python-packages
          path: dist/
          
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}